# Patch generated by Pyment v0.3.3

--- a/Export_code_to_latex.py
+++ b/Export_code_to_latex.py
@@ -5,6 +5,12 @@
 from nbconvert.preprocessors import ExecutePreprocessor
 
 def export_code_to_latex(main_latex_filename, project_nr):
+    """
+
+    :param main_latex_filename: 
+    :param project_nr: 
+
+    """
         script_dir = get_script_dir()
         relative_dir = f'latex/project{project_nr}/'
         appendix_dir = script_dir+'/../../../'+relative_dir+'Appendices/'
@@ -45,7 +51,14 @@
         
         
 def create_appendices_latex_code(main_non_code_appendix_inclusion_lines, notebook_appendices, project_nr, python_appendices):
-    ''' creates the appendix text for main.'''
+    """creates the appendix text for main.
+
+    :param main_non_code_appendix_inclusion_lines: 
+    :param notebook_appendices: 
+    :param project_nr: 
+    :param python_appendices: 
+
+    """
     main_appendix_inclusion_lines = main_non_code_appendix_inclusion_lines
     for appendix in python_appendices:
         line = update_appendix_tex_code(appendix.appendix_filename, project_nr)
@@ -58,7 +71,12 @@
         
         
 def filter_appendices_by_type(appendices, appendix_type):
-    ''' Returns the list of appendices of certain type from a list of appendix objects.'''
+    """Returns the list of appendices of certain type from a list of appendix objects.
+
+    :param appendices: 
+    :param appendix_type: 
+
+    """
     return_appendices = []
     for appendix in appendices:
         if appendix.appendix_type == appendix_type:
@@ -67,7 +85,11 @@
     
     
 def sort_python_appendices(appendices):
-    ''' First puts __main__.py, followed by main.py followed by a-z code files.'''
+    """First puts __main__.py, followed by main.py followed by a-z code files.
+
+    :param appendices: 
+
+    """
     return_appendices = []
     for appendix in appendices: # first get appendix containing __main__.py
         if (appendix.code_filename=="__main__.py") or (appendix.code_filename=="__Main__.py"):
@@ -86,7 +108,11 @@
     
 
 def sort_notebook_appendices(appendices):
-    ''' Sorts notebooks on a-z pdf filenames.'''
+    """Sorts notebooks on a-z pdf filenames.
+
+    :param appendices: 
+
+    """
     return_appendices = []
     filtered_remaining_appendices = [i for i in appendices if i.code_filename is not None]
     appendices_sorted_a_z = filter_list_on_property(filtered_remaining_appendices)
@@ -94,7 +120,11 @@
     
     
 def filter_list_on_property(appendices):
-    ''' Returns a list based on the property: code_filename'''
+    """Returns a list based on the property: code_filename
+
+    :param appendices: 
+
+    """
     attributes = list(map(lambda x: x.code_filename, appendices))
     sorted_indices = sorted(range(len(attributes)), key=lambda k: attributes[k])
     sorted_list = []
@@ -104,8 +134,13 @@
             
             
 def get_order_of_non_code_appendices_in_main(appendices, appendix_tex_code):
-    ''' Scans the lines of appendices in the main code, and returns the lines that
-    of appendices that do not contain code, in specified order.'''
+    """Scans the lines of appendices in the main code, and returns the lines that
+    of appendices that do not contain code, in specified order.
+
+    :param appendices: 
+    :param appendix_tex_code: 
+
+    """
     non_code_appendices = []
     non_code_appendix_lines = []
     appendix_tex_code = list(dict.fromkeys(appendix_tex_code))
@@ -123,19 +158,35 @@
 
 
 def get_filename_from_latex_appendix_line(appendices, appendix_line):
+    """
+
+    :param appendices: 
+    :param appendix_line: 
+
+    """
     for filename in list(map(lambda appendix: appendix.appendix_filename, appendices)):
         if filename in appendix_line:
             return filename
             
             
 def get_appendix_from_filename(appendices, appendix_filename):
+    """
+
+    :param appendices: 
+    :param appendix_filename: 
+
+    """
     for appendix in appendices:
         if appendix_filename == appendix.appendix_filename:
             return appendix
             
             
 def get_compiled_notebook_paths(script_dir):
-    ''' Returns the list of jupiter notebook filepaths that were compiled successfully'''
+    """Returns the list of jupiter notebook filepaths that were compiled successfully
+
+    :param script_dir: 
+
+    """
     notebook_filepaths= get_filenames_in_dir('.ipynb', script_dir)
     compiled_notebook_filepaths = []
     
@@ -152,7 +203,13 @@
     
     
 def get_list_of_appendix_files(appendix_dir, absolute_notebook_filepaths, absolute_python_filepaths):
-    ''' Returns a list with all the appendix files with .tex extension.'''
+    """Returns a list with all the appendix files with .tex extension.
+
+    :param appendix_dir: 
+    :param absolute_notebook_filepaths: 
+    :param absolute_python_filepaths: 
+
+    """
     appendices = []
     appendices_paths = get_filenames_in_dir('.tex', appendix_dir)
     
@@ -178,16 +235,28 @@
     
     
 def get_filename_from_latex_inclusion_command(appendix_line, extension, start_substring):
-    ''' returns the filename in a latex inclusion command that is located in an appendix.
-    The inclusion command includes a python code or jupiter notebook pdf.'''
+    """returns the filename in a latex inclusion command that is located in an appendix.
+    The inclusion command includes a python code or jupiter notebook pdf.
+
+    :param appendix_line: 
+    :param extension: 
+    :param start_substring: 
+
+    """
     start_index = appendix_line.index(start_substring)
     end_index = appendix_line.index(extension)
     return get_filename_from_dir(appendix_line[start_index:end_index+len(extension)])
 
     
 def get_filenames_in_dir(extension, path, excluded_files=None):
-    '''Returns a list of the relative paths to all files within the code/projectX/src/ folder that match
-    the given file extension.'''
+    """Returns a list of the relative paths to all files within the code/projectX/src/ folder that match
+    the given file extension.
+
+    :param extension: 
+    :param path: 
+    :param excluded_files:  (Default value = None)
+
+    """
     filepaths=[]
     for r, d, f in os.walk(path):
         for file in f:
@@ -198,7 +267,15 @@
     
     
 def get_code_files_already_included_in_appendices(absolute_filepaths, appendix_dir, extension, project_nr, root_dir):
-    ''' Returns a list of filepaths that are already properly included in some appendix of this projectX,'''
+    """Returns a list of filepaths that are already properly included in some appendix of this projectX,
+
+    :param absolute_filepaths: 
+    :param appendix_dir: 
+    :param extension: 
+    :param project_nr: 
+    :param root_dir: 
+
+    """
     appendix_files = get_filenames_in_dir('.tex', appendix_dir)
     contained_codes = []
     for code_filepath in absolute_filepaths:
@@ -216,8 +293,16 @@
     
     
 def check_if_appendix_contains_file(appendix_content, code_filepath, extension, project_nr, root_dir):
-    ''' scans an appendix content to determine whether it contains a substring that 
-    includes the python code file.'''
+    """scans an appendix content to determine whether it contains a substring that
+    includes the python code file.
+
+    :param appendix_content: 
+    :param code_filepath: 
+    :param extension: 
+    :param project_nr: 
+    :param root_dir: 
+
+    """
     # convert code_filepath to the inclusion format in latex format
     latex_relative_filepath = f'latex/project{project_nr}/../../{code_filepath[len(root_dir):]}'
     latex_command = get_latex_inclusion_command(extension, latex_relative_filepath)
@@ -225,7 +310,12 @@
     
     
 def get_line_of_latex_command(appendix_content, latex_command):
-    ''' Returns the line number of a latex command if it is found. Returns -1 otherwise.'''
+    """Returns the line number of a latex command if it is found. Returns -1 otherwise.
+
+    :param appendix_content: 
+    :param latex_command: 
+
+    """
     # check if the file is in the latex code
     line_nr = 0
     for line in appendix_content:
@@ -239,7 +329,12 @@
     
     
 def line_is_commented(line, target_substring):
-    ''' Returns true if a line is commented, returns false otherwise '''
+    """Returns true if a line is commented, returns false otherwise
+
+    :param line: 
+    :param target_substring: 
+
+    """
     left_of_command = line[:line.rfind(target_substring)]
     if '%' in left_of_command:
         return True
@@ -247,6 +342,12 @@
                 
     
 def get_latex_inclusion_command(extension, latex_relative_filepath_to_codefile):
+    """
+
+    :param extension: 
+    :param latex_relative_filepath_to_codefile: 
+
+    """
     if extension==".py":
         left = "\pythonexternal{"
         right = "}"
@@ -260,14 +361,24 @@
     
     
 def read_file(filepath):
-    ''' Reads content of a file and returns it as a list of strings'''
+    """Reads content of a file and returns it as a list of strings
+
+    :param filepath: 
+
+    """
     with open(filepath) as f:
         content = f.readlines()
     return content  
 
 
 def get_code_files_not_yet_included_in_appendices(code_filepaths, contained_codes, extension):
-    ''' Returns a list of filepaths that are not yet properly included in some appendix of this projectX,'''
+    """Returns a list of filepaths that are not yet properly included in some appendix of this projectX,
+
+    :param code_filepaths: 
+    :param contained_codes: 
+    :param extension: 
+
+    """
     contained_filepaths = list(map(lambda contained_file: contained_file.code_filepath, contained_codes))    
     not_contained = []
     for filepath in code_filepaths:
@@ -277,7 +388,15 @@
 
 
 def create_appendices_with_code(appendix_dir, code_filepaths, extension, project_nr, root_dir):
-    ''' Creates the latex appendix files in with relevant codes included.'''
+    """Creates the latex appendix files in with relevant codes included.
+
+    :param appendix_dir: 
+    :param code_filepaths: 
+    :param extension: 
+    :param project_nr: 
+    :param root_dir: 
+
+    """
     appendix_filenames = []
     appendix_reference_index = 0
 
@@ -295,6 +414,13 @@
     
     
 def create_section(appendix_reference_index, code_filename, content):
+    """
+
+    :param appendix_reference_index: 
+    :param code_filename: 
+    :param content: 
+
+    """
     # write section
     left ="\section{Appendix "
     middle = code_filename.replace("_","\_")
@@ -305,7 +431,13 @@
     
     
 def overwrite_content_to_file(content, filepath, content_has_newlines=True):
-    ''' Writes the content of an appendix to a new appendix'''
+    """Writes the content of an appendix to a new appendix
+
+    :param content: 
+    :param filepath: 
+    :param content_has_newlines:  (Default value = True)
+
+    """
     with open(filepath,'w') as f:
         for line in content:
             if content_has_newlines:
@@ -315,7 +447,11 @@
 
 
 def get_appendix_tex_code(main_latex_filename):
-    ''' gets the latex appendix code from the main tex file.'''
+    """gets the latex appendix code from the main tex file.
+
+    :param main_latex_filename: 
+
+    """
     main_tex_code = read_file(main_latex_filename)
     start =  "\\begin{appendices}"
     end = "\end{appendices}"
@@ -325,6 +461,12 @@
 
 
 def get_index_of_substring_in_list(lines, target_substring):
+    """
+
+    :param lines: 
+    :param target_substring: 
+
+    """
     for i in range(0, len(lines)):
         if target_substring in lines[i]:
             if not line_is_commented(lines[i], target_substring):
@@ -332,7 +474,12 @@
         
 
 def update_appendix_tex_code(appendix_filename, project_nr):
-    ''' Includes the appendices as latex commands in the tex code string'''
+    """Includes the appendices as latex commands in the tex code string
+
+    :param appendix_filename: 
+    :param project_nr: 
+
+    """
     left = "\input{latex/project"
     middle = "/Appendices/"
     right = "} \\newpage\n"
@@ -340,24 +487,39 @@
         
         
 def substitute_appendix_code(end_index, main_tex_code, start_index, updated_appendices_tex_code):
-    ''' Replaces the old latex code that include the appendices with the new latex 
-    commands that include the appendices in the latex report.'''
+    """Replaces the old latex code that include the appendices with the new latex
+    commands that include the appendices in the latex report.
+
+    :param end_index: 
+    :param main_tex_code: 
+    :param start_index: 
+    :param updated_appendices_tex_code: 
+
+    """
     updated_main_tex_code = main_tex_code[0:start_index]+updated_appendices_tex_code+main_tex_code[end_index:]
     return updated_main_tex_code
     
 
 def get_filename_from_dir(path):
+    """
+
+    :param path: 
+
+    """
     return path[path.rfind("/")+1:]
 
 
 def get_script_dir():
-    ''' returns the directory of this script regardles of from which level the code is executed '''
+    """returns the directory of this script regardles of from which level the code is executed"""
     return os.path.dirname(__file__)
 	
 
 class Appendix_with_code:
-    ''' stores in which appendix file and accompanying line number in the appendix in which a code file is 
-    already included. Does not take into account whether this appendix is in the main tex file or not'''
+    """stores in which appendix file and accompanying line number in the appendix in which a code file is
+    already included. Does not take into account whether this appendix is in the main tex file or not
+
+
+    """
     def __init__(self, code_filepath, appendix_filepath, appendix_content, file_line_nr, extension):
         self.code_filepath = code_filepath
         self.appendix_filepath = appendix_filepath
@@ -367,7 +529,7 @@
         
         
 class Appendix:
-    ''' stores in appendix files and type of appendix.'''
+    """stores in appendix files and type of appendix."""
     def __init__(self, appendix_filepath, appendix_content, appendix_type, code_filename=None, appendix_inclusion_line=None):
         self.appendix_filepath = appendix_filepath
         self.appendix_filename = get_filename_from_dir(self.appendix_filepath)
